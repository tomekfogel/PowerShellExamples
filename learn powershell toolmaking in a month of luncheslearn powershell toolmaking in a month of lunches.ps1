
c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\__MACOSX\code listings\._listing10-4.ps1
************************************************************************
[Error] - File could not be written...


c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\__MACOSX\code listings\._listing9-2.ps1
************************************************************************
[Error] - File could not be written...


c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\Chapter 25 Script Complete.ps1
************************************************************************
ï»¿#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 73e81dac-2fd5-4679-98af-575cf70d7413
# Source File: Toolmaking\Toolmaking.pfproj
#------------------------------------------------------------------------
#========================================================================
# Code Generated By: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.0.3
# Generated On: 6/8/2012 2:28 PM
# Generated By: Administrator
#========================================================================


#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
[void][Reflection.Assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
[void][Reflection.Assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager
	#Note: $Args contains the parsed arguments passed to the packager (Type: System.Array) 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_pff) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}








#region Call-MainForm_pff
function Call-MainForm_pff
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$OKButton = New-Object 'System.Windows.Forms.Button'
	$EventLogName = New-Object 'System.Windows.Forms.ComboBox'
	$ComputerName = New-Object 'System.Windows.Forms.TextBox'
	$labelEnterComputerName = New-Object 'System.Windows.Forms.Label'
	$labelSelectEventLog = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$OnLoadFormEvent={
	#TODO: Initialize Form Controls here
	
	}
	
	
	
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}#endregion
	
	$OKButton_Click={
		if ($EventLogName.Visible) {
			# retrieve event log
			if ($EventLogName.SelectedIndex -gt -1) {
				$global_events = Get-EventLog -ComputerName $ComputerName.Text `
				                        -LogName $EventLogName.SelectedItem
				#$entries | Out-GridView
				$global_logname = $EventLogName.SelectedItem
				Call-Results_pff
			}
		} else {
			# populate event log list
			$logs = Get-EventLog -ComputerName $ComputerName.Text `
			                     -List |
				    Select-Object -ExpandProperty Log
			Load-ComboBox -ComboBox $EventLogName `
			              -Items $logs
			$EventLogName.Visible = $true
			$labelSelectEventLog.Visible = $true
		}
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_EventLogName = $EventLogName.Text
		$script:MainForm_ComputerName = $ComputerName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$OKButton.remove_Click($OKButton_Click)
			$MainForm.remove_Load($OnLoadFormEvent)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# MainForm
	#
	$MainForm.Controls.Add($OKButton)
	$MainForm.Controls.Add($EventLogName)
	$MainForm.Controls.Add($ComputerName)
	$MainForm.Controls.Add($labelEnterComputerName)
	$MainForm.Controls.Add($labelSelectEventLog)
	$MainForm.ClientSize = '282, 129'
	$MainForm.FormBorderStyle = 'FixedDialog'
	$MainForm.MaximizeBox = $False
	$MainForm.MinimizeBox = $False
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Toolmaking Demo"
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# OKButton
	#
	$OKButton.Location = '190, 94'
	$OKButton.Name = "OKButton"
	$OKButton.Size = '75, 23'
	$OKButton.TabIndex = 4
	$OKButton.Text = "OK"
	$OKButton.UseVisualStyleBackColor = $True
	$OKButton.add_Click($OKButton_Click)
	#
	# EventLogName
	#
	$EventLogName.DropDownStyle = 'DropDownList'
	$EventLogName.FormattingEnabled = $True
	$EventLogName.Location = '13, 67'
	$EventLogName.Name = "EventLogName"
	$EventLogName.Size = '252, 21'
	$EventLogName.TabIndex = 2
	$EventLogName.Visible = $False
	#
	# ComputerName
	#
	$ComputerName.Location = '12, 23'
	$ComputerName.Name = "ComputerName"
	$ComputerName.Size = '253, 20'
	$ComputerName.TabIndex = 1
	#
	# labelEnterComputerName
	#
	$labelEnterComputerName.Location = '13, 9'
	$labelEnterComputerName.Name = "labelEnterComputerName"
	$labelEnterComputerName.Size = '127, 21'
	$labelEnterComputerName.TabIndex = 0
	$labelEnterComputerName.Text = "Enter computer name:"
	#
	# labelSelectEventLog
	#
	$labelSelectEventLog.Location = '13, 53'
	$labelSelectEventLog.Name = "labelSelectEventLog"
	$labelSelectEventLog.Size = '100, 18'
	$labelSelectEventLog.TabIndex = 3
	$labelSelectEventLog.Text = "Select Event Log:"
	$labelSelectEventLog.Visible = $False
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion

#region Call-Global_ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	$global_events = @()
	$global_logname = ''
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{ 
		if($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion

#region Call-Results_pff
function Call-Results_pff
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load("mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	[void][reflection.assembly]::Load("System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
	[void][reflection.assembly]::Load("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$Results = New-Object 'System.Windows.Forms.Form'
	$OKButton2 = New-Object 'System.Windows.Forms.Button'
	$EventCountLabel = New-Object 'System.Windows.Forms.Label'
	$LogNameLabel = New-Object 'System.Windows.Forms.Label'
	$ComputerNameLabel = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	function OnApplicationLoad {
		#Note: This function is not called in Projects
		#Note: This function runs before the form is created
		#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
		#Note: To get the console output in the Packager (Windows Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
		#Important: Form controls cannot be accessed in this function
		#TODO: Add snapins and custom code to validate the application load
		
		return $true #return true for success or false for failure
	}
	
	
	function OnApplicationExit {
		#Note: This function is not called in Projects
		#Note: This function runs after the form is closed
		#TODO: Add custom code to clean up and unload snapins when the application exits
		
		$script:ExitCode = 0 #Set the exit code for the Packager
	}
	
	$Results_Load={
		#TODO: Initialize Form Controls here
		$ComputerNameLabel.Text = $global_events[0].machinename
		$LogNameLabel.Text = $global_logname
		$EventCountLabel.Text = $global_events | measure | select -ExpandProperty count
	}
	
	$OKButton2_Click={
		#TODO: Place custom script here
		$Results.Close()
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$Results.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$OKButton2.remove_Click($OKButton2_Click)
			$Results.remove_Load($Results_Load)
			$Results.remove_Load($Form_StateCorrection_Load)
			$Results.remove_Closing($Form_StoreValues_Closing)
			$Results.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	#
	# Results
	#
	$Results.Controls.Add($OKButton2)
	$Results.Controls.Add($EventCountLabel)
	$Results.Controls.Add($LogNameLabel)
	$Results.Controls.Add($ComputerNameLabel)
	$Results.ClientSize = '284, 166'
	$Results.ControlBox = $False
	$Results.FormBorderStyle = 'FixedDialog'
	$Results.Name = "Results"
	$Results.Text = "Results"
	$Results.add_Load($Results_Load)
	#
	# OKButton2
	#
	$OKButton2.Location = '13, 130'
	$OKButton2.Name = "OKButton2"
	$OKButton2.Size = '259, 23'
	$OKButton2.TabIndex = 3
	$OKButton2.Text = "OK"
	$OKButton2.UseVisualStyleBackColor = $True
	$OKButton2.add_Click($OKButton2_Click)
	#
	# EventCountLabel
	#
	$EventCountLabel.Location = '13, 89'
	$EventCountLabel.Name = "EventCountLabel"
	$EventCountLabel.Size = '259, 27'
	$EventCountLabel.TabIndex = 2
	$EventCountLabel.Text = "label3"
	$EventCountLabel.TextAlign = 'MiddleCenter'
	#
	# LogNameLabel
	#
	$LogNameLabel.Location = '12, 46'
	$LogNameLabel.Name = "LogNameLabel"
	$LogNameLabel.Size = '260, 23'
	$LogNameLabel.TabIndex = 1
	$LogNameLabel.Text = "label2"
	$LogNameLabel.TextAlign = 'MiddleCenter'
	#
	# ComputerNameLabel
	#
	$ComputerNameLabel.Location = '12, 9'
	$ComputerNameLabel.Name = "ComputerNameLabel"
	$ComputerNameLabel.Size = '260, 23'
	$ComputerNameLabel.TabIndex = 0
	$ComputerNameLabel.Text = "label1"
	$ComputerNameLabel.TextAlign = 'MiddleCenter'
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $Results.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$Results.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$Results.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$Results.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $Results.ShowDialog()

}
#endregion

#Start the application
Main ($CommandLine)



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing10-1.ps1
************************************************************************
ï»¿function Get-SystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-SystemInfo
.EXAMPLE
 Get-SystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                }
            }
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo âcomputername NOTONLINE



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing10-2.ps1
************************************************************************
ï»¿function Get-SystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-SystemInfo
.EXAMPLE
 Get-SystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $everything_ok = $true
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                $everything_ok = $false
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                }
            }

            if ($everything_ok) {
                $comp = Get-WmiObject -class Win32_ComputerSystem `
                                      -computerName $computer
                $bios = Get-WmiObject -class Win32_BIOS `
                                      -computerName $computer
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion;
                           'BIOSSerial'=$bios.serialnumber;
                           'Manufacturer'=$comp.manufacturer;
                           'Model'=$comp.model}
                Write-Verbose "WMI queries complete"
                $obj = New-Object -TypeName PSObject -Property $props
                Write-Output $obj
            }
        }
    }
    END {}
}

Get-SystemInfo âcomputername NOTONLINE -logerrors



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing10-3.ps1
************************************************************************
ï»¿function Get-SystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-SystemInfo
.EXAMPLE
 Get-SystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $everything_ok = $true
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                $everything_ok = $false
                Write-Warning "$computer failed"
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                    Write-Warning "Logged to $ErrorLog"
                }
            }

            if ($everything_ok) {
                $comp = Get-WmiObject -class Win32_ComputerSystem `
                                      -computerName $computer
                $bios = Get-WmiObject -class Win32_BIOS `
                                      -computerName $computer
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion;
                           'BIOSSerial'=$bios.serialnumber;
                           'Manufacturer'=$comp.manufacturer;
                           'Model'=$comp.model}
                Write-Verbose "WMI queries complete"
                $obj = New-Object -TypeName PSObject -Property $props
                Write-Output $obj
            }
        }
    }
    END {}
}

Get-SystemInfo -ComputerName NOTONLINE -LogErrors



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing10-4.ps1
************************************************************************
Function Get-SystemInfo {
	
<#
.SYNOPSIS
Gets critical system info from one or more computers.
.DESCRIPTION
This command uses WMI, and can accept computer names, CNAME aliases,
and IP addresses. WMI must be enabled and you must run this
with admin rights for any remote computer.
.PARAMETER Computername
One or more names or IP addresses to query.
.EXAMPLE
Get-SystemInfo -computername localhost
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [ValidateNotNullOrEmpty()]
        [string[]]$ComputerName
    )
    PROCESS {
        foreach ($computer in $computerName) {
            WWrite-Verbose "Getting WMI data from $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem -computerName $computer
            $cs = Get-WmiObject -class Win32_ComputerSystem -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'LastBootTime'=($os.ConvertToDateTime($os.LastBootupTime));
                       'OSVersion'=$os.version;
                       'Manufacturer'=$cs.manufacturer;
                       'Model'=$cs.model
			          }
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
}





c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing11-1.ps1
************************************************************************
ï»¿$data = import-csv c:\data.csv
$totalqty = 0
$totalsold = 0
$totalbought = 0
foreach ($line in $data) {
if ($line.transaction -eq 'buy') {
    # buy transaction (we sold)
    $totalqty -= $line.qty
    $totalsold = $line.total } else {
    # sell transaction (we bought)
    $totalqty += $line.qty
    $totalbought = $line.total }
"totalqty,totalbought,totalsold,totalamt" | out-file c:\summary.csv
"$totalqty,$totalbought,$totalsold,$($totalbought-$totalsold)" |
 out-file c:\summary.csv -append



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing11-3.ps1
************************************************************************
ï»¿$data = import-csv c:\data.csv
$totalqty = 0
$totalsold = 0
$totalbought = 0
foreach ($line in $data) {
    if ($line.transaction -eq 'buy') {
        # buy transaction (we sold)
        $totalqty -= $line.qty
        $totalsold = $line.total
    } else {
        # sell transaction (we bought)
        $totalqty += $line.qty
        $totalbought = $line.total
    }
"totalqty,totalbought,totalsold,totalamt" | out-file c:\summary.csv
"$totalqty,$totalbought,$totalsold,$($totalbought-$totalsold)" |
    out-file c:\summary.csv âappend



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing11-4.ps1
************************************************************************
ï»¿$data = import-csv c:\data.csv
$totalqty = 0
$totalsold = 0
$totalbought = 0
foreach ($line in $data) {
    if ($line.transaction -eq 'buy') {
        # buy transaction (we sold)
        $totalqty -= $line.qty
        $totalsold = $line.total
    } else {
        # sell transaction (we bought)
        $totalqty += $line.qty
        $totalbought = $line.total
    }
}
"totalqty,totalbought,totalsold,totalamt" | out-file c:\summary.csv
"$totalqty,$totalbought,$totalsold,$($totalbought-$totalsold)" |
    out-file c:\summary.csv âappend



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing11-5.ps1
************************************************************************
ï»¿[CmdletBinding()]
param()
$data = import-csv c:\data.csv
Write-Debug "Imported CSV data"

$totalqty = 0
$totalsold = 0
$totalbought = 0
foreach ($line in $data) {
    if ($line.transaction -eq 'buy') {

        Write-Debug "ENDED BUY transaction (we sold)"
        $totalqty -= $line.qty
        $totalsold = $line.total

    } else {

        $totalqty += $line.qty
        $totalbought = $line.total
        Write-Debug "ENDED SELL transaction (we bought)"

    }
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing11-7.ps1
************************************************************************
ï»¿[CmdletBinding()]
param()
$data = import-csv c:\data.csv
Write-Debug "Imported CSV data"

$totalqty = 0
$totalsold = 0
$totalbought = 0
foreach ($line in $data) {
    if ($line.transaction -eq 'buy') {

        Write-Debug "ENDED BUY transaction (we sold)"
        $totalqty -= $line.qty
        $totalsold += $line.total

    } else {

        $totalqty += $line.qty
        $totalbought += $line.total
        Write-Debug "ENDED SELL transaction (we bought)"

    }
}

Write-Debug "OUTPUT: $totalqty,$totalbought,$totalsold,$($totalbought-$totalsold)"

"totalqty,totalbought,totalsold,totalamt" | out-file c:\summary.csv
"$totalqty,$totalbought,$totalsold,$($totalbought-$totalsold)" |
    out-file c:\summary.csv âappend



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing12-1.ps1
************************************************************************
ï»¿function Get-SystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-SystemInfo
.EXAMPLE
 Get-SystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $everything_ok = $true
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                $everything_ok = $false
                Write-Warning "$computer failed"
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                    Write-Warning "Logged to $ErrorLog"
                }
            }

            if ($everything_ok) {
                $comp = Get-WmiObject -class Win32_ComputerSystem `
                                      -computerName $computer
                $bios = Get-WmiObject -class Win32_BIOS `
                                      -computerName $computer
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion;
                           'BIOSSerial'=$bios.serialnumber;
                           'Manufacturer'=$comp.manufacturer;
                           'Model'=$comp.model}
                Write-Verbose "WMI queries complete"
                $obj = New-Object -TypeName PSObject -Property $props
                $obj.PSObject.TypeNames.Insert(0,'MOL.SystemInfo')
                Write-Output $obj
            }
        }
    }
    END {}
}

Get-SystemInfo -ComputerName localhost | Get-Member



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing13-1.ps1
************************************************************************
ï»¿function Get-MOLSystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-MOLSystemInfo
.EXAMPLE
 Get-MOLSystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $everything_ok = $true
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                $everything_ok = $false
                Write-Warning "$computer failed"
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                    Write-Warning "Logged to $ErrorLog"
                }
            }

            if ($everything_ok) {
                $comp = Get-WmiObject -class Win32_ComputerSystem `
                                      -computerName $computer
                $bios = Get-WmiObject -class Win32_BIOS `
                                      -computerName $computer
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion;
                           'BIOSSerial'=$bios.serialnumber;
                           'Manufacturer'=$comp.manufacturer;
                           'Model'=$comp.model}
                Write-Verbose "WMI queries complete"
                $obj = New-Object -TypeName PSObject -Property $props
                $obj.PSObject.TypeNames.Insert(0,'MOL.SystemInfo')
                Write-Output $obj
            }
        }
    }
    END {}
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing13-2.ps1
************************************************************************
ï»¿$MOLErrorLogPreference = 'c:\mol-retries.txt'  #A

function Get-MOLSystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-MOLSystemInfo
.EXAMPLE
 Get-MOLSystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = $MOLErrorLogPreference,  #B

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $everything_ok = $true
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                $everything_ok = $false
                Write-Warning "$computer failed"
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                    Write-Warning "Logged to $ErrorLog"
                }
            }

            if ($everything_ok) {
                $comp = Get-WmiObject -class Win32_ComputerSystem `
                                      -computerName $computer
                $bios = Get-WmiObject -class Win32_BIOS `
                                      -computerName $computer
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion;
                           'BIOSSerial'=$bios.serialnumber;
                           'Manufacturer'=$comp.manufacturer;
                           'Model'=$comp.model}
                Write-Verbose "WMI queries complete"
                $obj = New-Object -TypeName PSObject -Property $props
                $obj.PSObject.TypeNames.Insert(0,'MOL.SystemInfo')
                Write-Output $obj
            }
        }
    }
    END {}
}
Export-ModuleMember -Variable MOLErrorLogPreference  #C
Export-ModuleMember -Function Get-MOLSystemInfo



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing14-3.ps1
************************************************************************
ï»¿function Get-MOLDatabaseData {
    [CmdletBinding()]
    param (
        [string]$connectionString,
        [string]$query,
        [switch]$isSQLServer
    )
    if ($isSQLServer) {
        Write-Verbose 'in SQL Server mode'
        $connection = New-Object -TypeName `
            System.Data.SqlClient.SqlConnection
    } else {
        Write-Verbose 'in OleDB mode'
        $connection = New-Object -TypeName `
            System.Data.OleDb.OleDbConnection
    }
    $connection.ConnectionString = $connectionString
    $command = $connection.CreateCommand()
    $command.CommandText = $query
    if ($isSQLServer) {
        $adapter = New-Object -TypeName `
        System.Data.SqlClient.SqlDataAdapter $command
    } else {
        $adapter = New-Object -TypeName `
        System.Data.OleDb.OleDbDataAdapter $command
    }
    $dataset = New-Object -TypeName System.Data.DataSet
    $adapter.Fill($dataset)
    $dataset.Tables[0]
    $connection.close()
}

function Invoke-MOLDatabaseQuery {
    [CmdletBinding(SupportsShouldProcess=$True,
                   ConfirmImpact='Low')]
    param (
        [string]$connectionString,
        [string]$query,
        [switch]$isSQLServer
    )
    if ($isSQLServer) {
        Write-Verbose 'in SQL Server mode'
        $connection = New-Object -TypeName `
            System.Data.SqlClient.SqlConnection
    } else {
        Write-Verbose 'in OleDB mode'
        $connection = New-Object -TypeName `
            System.Data.OleDb.OleDbConnection
    }
    $connection.ConnectionString = $connectionString
    $command = $connection.CreateCommand()
    $command.CommandText = $query
    if ($pscmdlet.shouldprocess($query)) {
        $connection.Open()
        $command.ExecuteNonQuery()
        $connection.close()
    }
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing14-4.ps1
************************************************************************
ï»¿$MOLErrorLogPreference = 'c:\mol-retries.txt'
$MOLConnectionString = "server=localhost\SQLEXPRESS;database=inventory;trusted_connection=True"

Import-Module MOLDatabase

function Get-MOLComputerNamesFromDatabase {
<#
.SYNOPSIS
Reads computer names from the MoL sample database,
placing them into the pipeline as strings.
#>
    Get-MOLDatabaseData -connectionString $MOLConnectionString `
                        -isSQLServer `
                        -query "SELECT computername FROM computers" 
}

function Set-MOLInventoryInDatabase {
<#
.SYNOPSIS
Accepts the output of Get-MOLSystemInfo and saves
the results back to the MoL sample database.
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True)]
        [object[]]$inputObject
    )
    PROCESS {
        foreach ($obj in $inputobject) {
            $query = "UPDATE computers SET
                      osversion = '$($obj.osversion)',
                      spversion = '$($obj.spversion)',
                      manufacturer = '$($obj.manufacturer)',
                      model = '$($obj.model)'
                      WHERE computername = '$($obj.computername)'"
            Write-Verbose "Query will be $query"
            Invoke-MOLDatabaseQuery -connection $MOLConnectionString `
                                    -isSQLServer `
                                    -query $query
        }
    }
}

function Get-MOLSystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-MOLSystemInfo
.EXAMPLE
 Get-MOLSystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   ValueFromPipelineByPropertyName=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = $MOLErrorLogPreference,

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $everything_ok = $true
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                $everything_ok = $false
                Write-Warning "$computer failed"
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                    Write-Warning "Logged to $ErrorLog"
                }
            }

            if ($everything_ok) {
                $comp = Get-WmiObject -class Win32_ComputerSystem `
                                      -computerName $computer
                $bios = Get-WmiObject -class Win32_BIOS `
                                      -computerName $computer
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion;
                           'BIOSSerial'=$bios.serialnumber;
                           'Manufacturer'=$comp.manufacturer;
                           'Model'=$comp.model}
                Write-Verbose "WMI queries complete"
                $obj = New-Object -TypeName PSObject -Property $props
                $obj.PSObject.TypeNames.Insert(0,'MOL.SystemInfo')
                Write-Output $obj
            }
        }
    }
    END {}
}

Export-ModuleMember -Variable MOLErrorLogPreference
Export-ModuleMember -Function Get-MOLSystemInfo,
                              Get-MOLComputerNamesFromDatabase,
                              Set-MOLInventoryInDatabase



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing14-5.ps1
************************************************************************
ï»¿function Get-MOLDatabaseData {
    [CmdletBinding()]
    param (
        [string]$connectionString,
        [string]$query,
        [switch]$isSQLServer
    )
    if ($isSQLServer) {
        Write-Verbose 'in SQL Server mode'
        $connection = New-Object -TypeName `
            System.Data.SqlClient.SqlConnection
    } else {
        Write-Verbose 'in OleDB mode'
        $connection = New-Object -TypeName `
            System.Data.OleDb.OleDbConnection
    }
    $connection.ConnectionString = $connectionString
    $command = $connection.CreateCommand()
    $command.CommandText = $query
    if ($isSQLServer) {
        $adapter = New-Object -TypeName `
        System.Data.SqlClient.SqlDataAdapter $command
    } else {
        $adapter = New-Object -TypeName `
        System.Data.OleDb.OleDbDataAdapter $command
    }
    $dataset = New-Object -TypeName System.Data.DataSet
    $adapter.Fill($dataset)
    $dataset.Tables[0]
    $connection.close()
}

function Invoke-MOLDatabaseQuery {
    [CmdletBinding(SupportsShouldProcess=$True,
                   ConfirmImpact='Low')]
    param (
        [string]$connectionString,
        [string]$query,
        [switch]$isSQLServer
    )
    if ($isSQLServer) {
        Write-Verbose 'in SQL Server mode'
        $connection = New-Object -TypeName `
            System.Data.SqlClient.SqlConnection
    } else {
        Write-Verbose 'in OleDB mode'
        $connection = New-Object -TypeName `
            System.Data.OleDb.OleDbConnection
    }
    $connection.ConnectionString = $connectionString
    $command = $connection.CreateCommand()
    $command.CommandText = $query
    if ($pscmdlet.shouldprocess($query)) {
        $connection.Open()
        $command.ExecuteNonQuery() | Out-Null
        $connection.close()
    }
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing16-1.ps1
************************************************************************
ï»¿function Restart-MOLCimComputer {
    [CmdletBinding(SupportsShouldProcess=$True,
                   ConfirmImpact='High')]
    param(
        [Parameter(Mandatory=$true,
                   ValueFromPipeline=$true)]
        [string[]]$ComputerName
    )
    PROCESS {
        ForEach ($computer in $computername) {
            Invoke-CimMethod -ClassName Win32_OperatingSystem `
                             -MethodName Reboot `
                             -ComputerName $computer
        }
    }
}

Export-ModuleMember -Variable MOLErrorLogPreference
Export-ModuleMember -Function Get-MOLSystemInfo,
                              Get-MOLComputerNamesFromDatabase,
                              Set-MOLInventoryInDatabase,
                              Restart-MOLCimComputer



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing16-2.ps1
************************************************************************
ï»¿function Set-MOLServicePassword {
    [CmdletBinding(SupportsShouldProcess=$True,
                   ConfirmImpact='Medium')]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True)]
        [string[]]$ComputerName,

        [Parameter(Mandatory=$True)]
        [string]$ServiceName,

        [Parameter(Mandatory=$True)]
        [string]$NewPassword
    )
    PROCESS {
        foreach ($computer in $computername) {
            $svcs = Get-WmiObject -ComputerName $computer `
                                  -Filter "name='$servicename'" `
                                  -Class Win32_Service
            foreach ($svc in $svcs) {
                if ($psCmdlet.ShouldProcess("$svc on $computer")) {
                    $svc.Change($null,
                                $null,
                                $null,
                                $null,
                                $null,
                                $null,
                                $null,
                                $NewPassword) | Out-Null
                }
            }
        }
    }
}

Export-ModuleMember -Variable MOLErrorLogPreference
Export-ModuleMember -Function Get-MOLSystemInfo,
                              Get-MOLComputerNamesFromDatabase,
                              Set-MOLInventoryInDatabase,
                              Restart-CimComputer,
                              Set-MOLServicePassword



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing16-3.ps1
************************************************************************
ï»¿$MOLErrorLogPreference = 'c:\mol-retries.txt'
$MOLConnectionString = "server=localhost\SQLEXPRESS;database=inventory;trusted_connection=True"

Import-Module MOLDatabase

function Get-MOLComputerNamesFromDatabase {
<#
.SYNOPSIS
Reads computer names from the MoL sample database,
placing them into the pipeline as strings.
#>
    Get-MOLDatabaseData -connectionString $MOLConnectionString `
                        -isSQLServer `
                        -query "SELECT computername FROM computers" 
}

function Set-MOLInventoryInDatabase {
<#
.SYNOPSIS
Accepts the output of Get-MOLSystemInfo and saves
the results back to the MoL sample database.
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True)]
        [object[]]$inputObject
    )
    PROCESS {
        foreach ($obj in $inputobject) {
            $query = "UPDATE computers SET
                      osversion = '$($obj.osversion)',
                      spversion = '$($obj.spversion)',
                      manufacturer = '$($obj.manufacturer)',
                      model = '$($obj.model)'
                      WHERE computername = '$($obj.computername)'"
            Write-Verbose "Query will be $query"
            Invoke-MOLDatabaseQuery -connection $MOLConnectionString `
                                    -isSQLServer `
                                    -query $query
        }
    }
}

function Get-MOLSystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-MOLSystemInfo
.EXAMPLE
 Get-MOLSystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   ValueFromPipelineByPropertyName=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = $MOLErrorLogPreference,

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            Try {
                $everything_ok = $true
                $os = Get-WmiObject -class Win32_OperatingSystem `
                                    -computerName $computer `
                                    -erroraction Stop
            } Catch {
                $everything_ok = $false
                Write-Warning "$computer failed"
                if ($LogErrors) {
                    $computer | Out-File $ErrorLog -Append
                    Write-Warning "Logged to $ErrorLog"
                }
            }

            if ($everything_ok) {
                $comp = Get-WmiObject -class Win32_ComputerSystem `
                                      -computerName $computer
                $bios = Get-WmiObject -class Win32_BIOS `
                                      -computerName $computer
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion;
                           'BIOSSerial'=$bios.serialnumber;
                           'Manufacturer'=$comp.manufacturer;
                           'Model'=$comp.model}
                Write-Verbose "WMI queries complete"
                $obj = New-Object -TypeName PSObject -Property $props
                $obj.PSObject.TypeNames.Insert(0,'MOL.SystemInfo')
                Write-Output $obj
            }
        }
    }
    END {}
}

function Restart-MOLCimComputer {
    [CmdletBinding(SupportsShouldProcess=$True,
                   ConfirmImpact='High')]
    param(
        [Parameter(Mandatory=$true,
                   ValueFromPipeline=$true)]
        [string[]]$ComputerName
    )
    PROCESS {
        ForEach ($computer in $computername) {
            Invoke-CimMethod -ClassName Win32_OperatingSystem `
                             -MethodName Reboot `
                             -ComputerName $computer
        }
    }
}

function Set-MOLServicePassword {
    [CmdletBinding(SupportsShouldProcess=$True,
                   ConfirmImpact='Medium')]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True)]
        [string[]]$ComputerName,

        [Parameter(Mandatory=$True)]
        [string]$ServiceName,

        [Parameter(Mandatory=$True)]
        [string]$NewPassword
    )
    PROCESS {
        foreach ($computer in $computername) {
            $svcs = Get-WmiObject -ComputerName $computer `
                                  -Filter "name='$servicename'" `
                                  -Class Win32_Service
            foreach ($svc in $svcs) {
                if ($psCmdlet.ShouldProcess("$svc on $computer")) {
                    $svc.Change($null,
                                $null,
                                $null,
                                $null,
                                $null,
                                $null,
                                $null,
                                $NewPassword) | Out-Null
                }
            }
        }
    }
}

Export-ModuleMember -Variable MOLErrorLogPreference
Export-ModuleMember -Function Get-MOLSystemInfo,
                              Get-MOLComputerNamesFromDatabase,
                              Set-MOLInventoryInDatabase,
                              Restart-CimComputer,
                              Set-MOLServicePassword



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing18-1.ps1
************************************************************************
ï»¿Import-Module PSWorkflow

workflow Test-Workflow {
    
    $a = 1
    $a

    $a++
    $a

    $b = $a + 2
    $b

}

Test-Workflow



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing18-2.ps1
************************************************************************
ï»¿Import-Module PSWorkflow

workflow Test-Workflow {
    
    $obj = New-Object -TypeName PSObject
    $obj | Add-Member -MemberType NoteProperty `
                      -Name ExampleProperty `
                      -Value 'Hello!'
    $obj | Get-Member
}

Test-Workflow



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing18-3.ps1
************************************************************************
ï»¿Import-Module PSWorkflow

workflow Test-Workflow {
    
    InlineScript {
        $obj = New-Object -TypeName PSObject
        $obj | Add-Member -MemberType NoteProperty `
                          -Name ExampleProperty `
                          -Value 'Hello!'
        $obj | Get-Member
    }
}

Test-Workflow



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing20-1.ps1
************************************************************************
ï»¿function Get-DetailedSystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True)][string[]]$computerName
    )
    PROCESS {
        foreach ($computer in $computerName) {
            $params = @{'computerName'=$computer;         #A
                        'class'='Win32_OperatingSystem'}  #A
            $os = Get-WmiObject @params                   #A

            $params = @{'computerName'=$computer;         #B
                        'class'='Win32_LogicalDisk';      #B
                        'filter'='drivetype=3'}           #B
            $disks = Get-WmiObject @params                #B
            
            $diskobjs = @()                               #C
            foreach ($disk in $disks) { 
                $diskprops = @{'Drive'=$disk.DeviceID;    #D
                               'Size'=$disk.size;         
                               'Free'=$disk.freespace}    
                $diskobj = new-object -Type PSObject -Property $diskprops
                $diskobjs += $diskobj                     #E
            }

            $mainprops = @{'ComputerName'=$computer;    #F
                           'Disks'=$diskobjs;
                           'OSVersion'=$os.version;
                           'SPVersion'=$os.servicepackmajorversion}
            $mainobject = New-Object -Type PSOBject -Property $mainprops
            Write-Output $mainobject
        }
    }
}

Get-DetailedSystemInfo -computerName localhost,DONJONES1D96



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing21-1.ps1
************************************************************************
ï»¿function Get-OSInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [string[]]$computerName
    )
    BEGIN {
        Write-Verbose "Starting Get-OSInfo"
    }
    PROCESS {
        ForEach ($computer in $computername) {
            try {
                $connected = $True
                Write-Verbose "Attempting $computer"
                $os = Get-WmiObject -ComputerName $computer `
                                    -class Win32_OperatingSystem `
                                    -EA Stop
            } catch {
                $connected = $false
                Write-Verbose "Connection to $computer failed"
            }
            if ($connected) {
                Write-Verbose "Connection to $computer succeeded"
                $cs = Get-WmiObject -ComputerName $computer `
                                    -class Win32_ComputerSystem
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'Manufacturer'=$cs.manufacturer;
                           'Model'=$cs.model}
                $obj = New-Object -TypeName PSObject -Property $props
                Write-Output $obj
            }
        }
    }
    END {
        Write-Verbose "Ending Get-OSInfo"
    }
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing21-2.ps1
************************************************************************
ï»¿$msgTable = Data {                      #1
    # culture="en-US"
    ConvertFrom-StringData @'
        attempting = Attempting
        connectionTo = Connection to
        failed = failed
        succeeded = succeeded
        starting = Starting Get-OSInfo
        ending = Ending Get-OSInfo
'@
}

function Get-OSInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [string[]]$computerName
    )
    BEGIN {
        Write-Verbose $msgTable.starting  #2
    }
    PROCESS {
        ForEach ($computer in $computername) {
            try {
                $connected = $True
                Write-Verbose "$($msgTable.attempting) $computer"
                $os = Get-WmiObject -ComputerName $computer `
                                    -class Win32_OperatingSystem `
                                    -EA Stop
            } catch {
                $connected = $false
                Write-Verbose "$($msgTable.connectionTo) $computer $($msgTable.failed)"
            }
            if ($connected) {
                Write-Verbose "$($msgTable.connectionTo) to $computer $($msgTable.succeeded)"
                $cs = Get-WmiObject -ComputerName $computer `
                                    -class Win32_ComputerSystem
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'Manufacturer'=$cs.manufacturer;
                           'Model'=$cs.model}
                $obj = New-Object -TypeName PSObject -Property $props
                Write-Output $obj
            }
        }
    }
    END {
        Write-Verbose $msgTable.ending
    }
}

Export-ModuleMember -function "Get-OSInfo"   #3



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing21-3.ps1
************************************************************************
ï»¿    ConvertFrom-StringData @'
        attempting = Versuch
        connectionTo = Der anschluss an
        failed = gescheitert
        succeeded = gelungen
        starting = Ab Get-OSInfo
        ending = Ende Get-OSInfo
'@



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing21-4.ps1
************************************************************************
ï»¿    ConvertFrom-StringData @'
        attempting = Intentar
        connectionTo = Conexion a
        failed = fracasado
        succeeded = exito
        starting = A partir Get-OSInfo
        ending = Final Get-OSInfo
'@



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing21-5.ps1
************************************************************************
ï»¿$msgTable = Data {
    # culture="en-US"
    ConvertFrom-StringData @'
        attempting = Attempting
        connectionTo = Connection to
        failed = failed
        succeeded = succeeded
        starting = Starting Get-OSInfo
        ending = Ending Get-OSInfo
'@
}
Import-LocalizedData -BindingVariable $msgTable  #1

function Get-OSInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [string[]]$computerName
    )
    BEGIN {
        Write-Verbose $msgTable.starting
    }
    PROCESS {
        ForEach ($computer in $computername) {
            try {
                $connected = $True
                Write-Verbose "$($msgTable.attempting) $computer"
                $os = Get-WmiObject -ComputerName $computer `
                                    -class Win32_OperatingSystem `
                                    -EA Stop
            } catch {
                $connected = $false
                Write-Verbose "$($msgTable.connectionTo) $computer $($msgTable.failed)"
            }
            if ($connected) {
                Write-Verbose "$($msgTable.connectionTo) to $computer $($msgTable.succeeded)"
                $cs = Get-WmiObject -ComputerName $computer `
                                    -class Win32_ComputerSystem
                $props = @{'ComputerName'=$computer;
                           'OSVersion'=$os.version;
                           'Manufacturer'=$cs.manufacturer;
                           'Model'=$cs.model}
                $obj = New-Object -TypeName PSObject -Property $props
                Write-Output $obj
            }
        }
    }
    END {
        Write-Verbose $msgTable.ending
    }
}

Export-ModuleMember -function "Get-OSInfo"



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing26-1.ps1
************************************************************************
ï»¿[CmdletBinding(DefaultParameterSetName='Page', HelpUri='http://go.microsoft.com/fwlink/?LinkID=113290', RemotingCapability='None')]
param(
    [Parameter(ValueFromPipeline=$true)]
    [psobject]
    ${InputObject},

    [Parameter(Position=0)]
    [System.Object[]]
    ${Property},

    [Parameter(ParameterSetName='Page', Position=3)]
    [string[]]
    ${Body},

    [Parameter(ParameterSetName='Page', Position=1)]
    [string[]]
    ${Head},

    [Parameter(ParameterSetName='Page', Position=2)]
    [ValidateNotNullOrEmpty()]
    [string]
    ${Title},

    [ValidateNotNullOrEmpty()]
    [ValidateSet('Table','List')]
    [string]
    ${As},

    [Parameter(ParameterSetName='Page')]
    [Alias('cu','uri')]
    [ValidateNotNullOrEmpty()]
    [System.Uri]
    ${CssUri},

    [Parameter(ParameterSetName='Fragment')]
    [ValidateNotNullOrEmpty()]
    [switch]
    ${Fragment},

    [ValidateNotNullOrEmpty()]
    [string[]]
    ${PostContent},

    [ValidateNotNullOrEmpty()]
    [string[]]
    ${PreContent})

begin
{
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
        {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('ConvertTo-Html', [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters }
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        throw
    }
}

process
{
    try {
        $steppablePipeline.Process($_)
    } catch {
        throw
    }
}

end
{
    try {
        $steppablePipeline.End()
    } catch {
        throw
    }
}
<#

.ForwardHelpTargetName ConvertTo-Html
.ForwardHelpCategory Cmdlet

#>



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing26-2.ps1
************************************************************************
ï»¿function Export-HTML {
    [CmdletBinding(DefaultParameterSetName='Page', 
                   RemotingCapability='None')]
    param(
        [Parameter(ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Position=0)]
        [System.Object[]]
        ${Property},

        [Parameter(ParameterSetName='Page', Position=3)]
        [string[]]
        ${Body},

        [Parameter(ParameterSetName='Page', Position=1)]
        [string[]]
        ${Head},

        [Parameter(ParameterSetName='Page', Position=2)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Title},

        [ValidateNotNullOrEmpty()]
        [ValidateSet('Table','List')]
        [string]
        ${As},

        [Parameter(ParameterSetName='Page')]
        [Alias('cu','uri')]
        [ValidateNotNullOrEmpty()]
        [System.Uri]
        ${CssUri},

        [Parameter(ParameterSetName='Fragment')]
        [ValidateNotNullOrEmpty()]
        [switch]
        ${Fragment},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${PostContent},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${PreContent})

    begin
    {
        try {
            $outBuffer = $null
            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
            {
                $PSBoundParameters['OutBuffer'] = 1
            }
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('ConvertTo-Html', [System.Management.Automation.CommandTypes]::Cmdlet)
            $scriptCmd = {& $wrappedCmd @PSBoundParameters }
            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($PSCmdlet)
        } catch {
            throw
        }
    }

    process
    {
        try {
            $steppablePipeline.Process($_)
        } catch {
            throw
        }
    }

    end
    {
        try {
            $steppablePipeline.End()
        } catch {
            throw
        }
    }
    <#

    .ForwardHelpTargetName ConvertTo-Html
    .ForwardHelpCategory Cmdlet

    #>
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing26-3.ps1
************************************************************************
ï»¿function Export-HTML {
    [CmdletBinding(DefaultParameterSetName='Page', 
                   RemotingCapability='None')]
    param(
        [Parameter(ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Position=0)]
        [System.Object[]]
        ${Property},

        [Parameter(ParameterSetName='Page', Position=3)]
        [string[]]
        ${Body},

        [Parameter(ParameterSetName='Page', Position=1)]
        [string[]]
        ${Head},

        [Parameter(ParameterSetName='Page', Position=2)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Title},

        [ValidateNotNullOrEmpty()]
        [ValidateSet('Table','List')]
        [string]
        ${As},

        [Parameter(ParameterSetName='Page')]
        [Alias('cu','uri')]
        [ValidateNotNullOrEmpty()]
        [System.Uri]
        ${CssUri},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${PostContent},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${PreContent})

    begin
    {
        try {
            $outBuffer = $null
            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
            {
                $PSBoundParameters['OutBuffer'] = 1
            }
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('ConvertTo-Html', [System.Management.Automation.CommandTypes]::Cmdlet)
            $scriptCmd = {& $wrappedCmd @PSBoundParameters }
            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($PSCmdlet)
        } catch {
            throw
        }
    }

    process
    {
        try {
            $steppablePipeline.Process($_)
        } catch {
            throw
        }
    }

    end
    {
        try {
            $steppablePipeline.End()
        } catch {
            throw
        }
    }
    <#

    .ForwardHelpTargetName ConvertTo-Html
    .ForwardHelpCategory Cmdlet

    #>
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing26-4.ps1
************************************************************************
ï»¿function Export-HTML {
    [CmdletBinding(DefaultParameterSetName='Page', 
                   RemotingCapability='None')]
    param(
        [Parameter(ValueFromPipeline=$true)]
        [psobject]
        ${InputObject},

        [Parameter(Position=0)]
        [System.Object[]]
        ${Property},

        [Parameter(ParameterSetName='Page', Position=3)]
        [string[]]
        ${Body},

        [Parameter(ParameterSetName='Page', Position=1)]
        [string[]]
        ${Head},

        [Parameter(ParameterSetName='Page', Position=2)]
        [ValidateNotNullOrEmpty()]
        [string]
        ${Title},

        [ValidateNotNullOrEmpty()]
        [ValidateSet('Table','List')]
        [string]
        ${As},

        [Parameter(ParameterSetName='Page')]
        [Alias('cu','uri')]
        [ValidateNotNullOrEmpty()]
        [System.Uri]
        ${CssUri},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${PostContent},

        [ValidateNotNullOrEmpty()]
        [string[]]
        ${PreContent},

        [Parameter(Mandatory=$True)]
        [ValidateNotNullOrEmpty()]
        [string]
        $FilePath)
        

    begin
    {
        try {
            $outBuffer = $null
            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer))
            {
                $PSBoundParameters['OutBuffer'] = 1
            }
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('ConvertTo-Html', [System.Management.Automation.CommandTypes]::Cmdlet)
            $PSBoundParameters.Remove('FilePath') | Out-Null
            $scriptCmd = {& $wrappedCmd @PSBoundParameters | Out-File $filePath }
            $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)
            $steppablePipeline.Begin($PSCmdlet)
        } catch {
            throw
        }
    }

    process
    {
        try {
            $steppablePipeline.Process($_)
        } catch {
            throw
        }
    }

    end
    {
        try {
            $steppablePipeline.End()
        } catch {
            throw
        }
    }
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing4-1.ps1
************************************************************************
ï»¿param(
    [string]$computerName = 'localhost'
)
Get-CimInstance -ClassName Win32_OperatingSystem `
                -ComputerName $computerName



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing4-2.ps1
************************************************************************
ï»¿function Get-OSInfo {
    param(
        [string]$computerName = 'localhost'
    )
    Get-CimInstance -ClassName Win32_OperatingSystem `
                    -ComputerName $computerName
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing4-3.ps1
************************************************************************
ï»¿function Get-OSInfo {
    param(
        [string]$computerName = 'localhost'
    )
    Get-CimInstance -ClassName Win32_OperatingSystem `
                    -ComputerName $computerName
}
Get-OSInfo âcomputername SERVER2



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing5-1.ps1
************************************************************************
ï»¿$var = 'hello!'

function My-Function {
    Write-Host "In the function; var contains '$var'"
    $var = 'goodbye!'
    Write-Host "In the function; var is now '$var'"
}

Write-Host "In the script; var is '$var'"
Write-Host "Running the function"
My-Function
Write-Host "Function is done"
Write-Host "In the script; var is now '$var'"



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-1.ps1
************************************************************************
ï»¿function <name> {
    [CmdletBinding()]
    param(
    )
    BEGIN {}
    PROCESS {}
    END {}
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-2.ps1
************************************************************************
ï»¿function <name> {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName,

        [string]$ErrorLog
    )
    BEGIN {}
    PROCESS {}
    END {}
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-3.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName,

        [string]$ErrorLog
    )
    BEGIN {}
    PROCESS {
        Write-Output $ComputerName
        Write-Output $ErrorLog
    }
    END {}
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-4.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName,

        [string]$ErrorLog
    )
    BEGIN {}
    PROCESS {
    }
    END {}
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-5.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName,

        [string]$ErrorLog
    )
    BEGIN {
        Write-Output "Log name is $errorlog"
    }
    PROCESS {
        foreach ($computer in $computername) {
            Write-Output "computer name is $computer"
        }
    }
    END {}
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-6.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName,

        [string]$ErrorLog
    )
    BEGIN {
        Write-Output "Log name is $errorlog"
    }
    PROCESS {
        foreach ($computer in $computername) {
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            
        }
    }
    END {}
}



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-7.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName,

        [string]$ErrorLog
    )
    BEGIN {
        Write-Output "Log name is $errorlog"
    }
    PROCESS {
        foreach ($computer in $computername) {
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo -ErrorLog x.txt -ComputerName localhost,localhost



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing7-8.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName,

        [string]$ErrorLog
    )
    BEGIN {
    }
    PROCESS {
        foreach ($computer in $computername) {
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo -ErrorLog x.txt -ComputerName localhost,localhost



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-1.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True)]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt'
    )
    BEGIN {
    }
    PROCESS {
        foreach ($computer in $computername) {
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo 



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-2.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True)]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt'
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo -ComputerName localhost



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-3.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt'
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo -Host localhost âverbose



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-4.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt'
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

'localhost','localhost' | Get-SystemInfo



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-5.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt'
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Write-Host "---- PIPELINE MODE ----"
'localhost','localhost' | Get-SystemInfo -Verbose

Write-Host "---- PARAM    MODE ----"
Get-SystemInfo -ComputerName localhost,localhost -Verbose



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-6.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt'
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Write-Host "---- PIPELINE MODE ----"
'localhost','localhost' | Get-SystemInfo -Verbose

Write-Host "---- PARAM    MODE ----"
Get-SystemInfo -ComputerName localhost,localhost -Verbose



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-7.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo -ComputerName localhost



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-8.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

Get-SystemInfo 



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing8-9.ps1
************************************************************************
ï»¿function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [string[]]$ComputerName
    )
    PROCESS {
        foreach ($computer in $computerName) {
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $cs = Get-WmiObject -class Win32_ComputerSystem `
                                -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'LastBootTime'=($os.ConvertToDateTime($os.LastBootupTime));
                       'OSVersion'=$os.version;
                       'Manufacturer'=$cs.manufacturer;
                       'Model'=$cs.model}
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
}

Get-SystemInfo -ComputerName localhost 



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing9-1.ps1
************************************************************************
ï»¿function Get-SystemInfo {
<#
.SYNOPSIS
Retrieves key system version and model information
from one to ten computers.
.DESCRIPTION
Get-SystemInfo uses Windows Management Instrumentation
(WMI) to retrieve information from one or more computers.
Specify computers by name or by IP address.
.PARAMETER ComputerName
One or more computer names or IP addresses, up to a maximum
of 10.
.PARAMETER LogErrors
Specify this switch to create a text log file of computers
that could not be queried.
.PARAMETER ErrorLog
When used with -LogErrors, specifies the file path and name
to which failed computer names will be written. Defaults to
C:\Retry.txt.
.EXAMPLE
 Get-Content names.txt | Get-SystemInfo
.EXAMPLE
 Get-SystemInfo -ComputerName SERVER1,SERVER2
#>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,
                   ValueFromPipeline=$True,
                   HelpMessage="Computer name or IP address")]
        [ValidateCount(1,10)]
        [Alias('hostname')]
        [string[]]$ComputerName,

        [string]$ErrorLog = 'c:\retry.txt',

        [switch]$LogErrors
    )
    BEGIN {
        Write-Verbose "Error log will be $ErrorLog"
    }
    PROCESS {
        Write-Verbose "Beginning PROCESS block"
        foreach ($computer in $computername) {
            Write-Verbose "Querying $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem `
                                -computerName $computer
            $comp = Get-WmiObject -class Win32_ComputerSystem `
                                  -computerName $computer
            $bios = Get-WmiObject -class Win32_BIOS `
                                  -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'OSVersion'=$os.version;
                       'SPVersion'=$os.servicepackmajorversion;
                       'BIOSSerial'=$bios.serialnumber;
                       'Manufacturer'=$comp.manufacturer;
                       'Model'=$comp.model}
            Write-Verbose "WMI queries complete"
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
    END {}
}

help Get-SystemInfo -full



c:\users\rocky\desktop\powershell books examples\learn powershell toolmaking in a month of luncheslearn powershell toolmaking in a month of lunches\code listings\listing9-2.ps1
************************************************************************
function Get-SystemInfo {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$True,ValueFromPipeline=$True)]
        [ValidateNotNullOrEmpty()]
        [string[]]$ComputerName
    )
    PROCESS {
        foreach ($computer in $computerName) {
            Write-Verbose "Getting WMI data from $computer"
            $os = Get-WmiObject -class Win32_OperatingSystem -computerName $computer
            $cs = Get-WmiObject -class Win32_ComputerSystem -computerName $computer
            $props = @{'ComputerName'=$computer;
                       'LastBootTime'=($os.ConvertToDateTime($os.LastBootupTime));
                       'OSVersion'=$os.version;
                       'Manufacturer'=$cs.manufacturer;
                       'Model'=$cs.model
					}
            $obj = New-Object -TypeName PSObject -Property $props
            Write-Output $obj
        }
    }
}

